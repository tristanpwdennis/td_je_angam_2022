myco_metadata = myco_metadata %>% mutate(frac_mapped = mapped/total.x)
myco_metadata = myco_metadata %>% mutate(frac_duplicates = duplicates/total.x)
write_csv(anth_metadata, "~/Projects/bactocap/metadata/anthrax_sample_sequencing_coverage_data_st1.csv")
write_csv(myco_metadata, "~/Projects/bactocap/metadata/mycoplasma_sample_sequencing_coverage_data_st2.csv")
#x = anth_metadata %>% select(-total.y, -secondary, -supplementary, -paired, -read1, -read2, -properly_paired, -with_itself_and_mate_mapped, -mate_on_diff_chr, -mate_on_diff_chrover5, -singletons, total.y, organism.y)
#y = myco_metadata %>% select(-total.y, -secondary, -supplementary, -paired, -read1, -read2, -properly_paired, -with_itself_and_mate_mapped, -mate_on_diff_chr, -mate_on_diff_chrover5, -singletons,total.y)
x = anth_metadata %>% select(sample_id, organism.x, total.x, duplicates,mapped, mean, max_ct, bc_amp_cycles, cap_lib_conc, amisuccessful, `%_bases_above_15`)
y = myco_metadata %>% select(sample_id, organism.x, total.x, duplicates,mapped, mean, max_ct, bc_amp_cycles, cap_lib_conc, amisuccessful, `%_bases_above_15`)
total_tbl = rbind(x,y)
total_tbl$cap_lib_conc = as.numeric(total_tbl$cap_lib_conc)
total_tbl$`%_bases_above_15` = as.numeric(total_tbl$`%_bases_above_15`)
total_tbl %>% filter(organism.x == 'anthrax' & sample_id != 'not-sequenced') %>% group_by(bc_amp_cycles, amisuccessful) %>% summarise(countf = n())
total_tbl %>% filter(max_ct > 30 & sample_id != 'not-sequenced') %>% group_by(organism.x, amisuccessful) %>% summarise(n = n())
#join mapping data to coverage data to make ST3 final
#total_tbl = left_join(total_tbl, covtable, by = c('sample_id' = 'sample_id'))
#create fracmapped column
total_tbl$frac_mapped = total_tbl$mapped/total_tbl$total.x
#define successful and unsuccessful samples as frac genome bases over 15X > 80%
total_tbl = total_tbl %>% mutate(amisuccessful= case_when(`%_bases_above_15` > 0.8 ~ 'yes',
`%_bases_above_15` < 0.8 ~ 'no'))
#wo
write_csv(total_tbl, '~/Projects/bactocap/metadata/all_metadata.csv')
#############
#PLOTS
#ct / cap eff
points = total_tbl %>% dplyr::select(max_ct, organism.x, frac_mapped) %>%
ggplot(aes(x=max_ct, y=frac_mapped, colour=organism.x))+
geom_point()+
scale_color_manual(values=c("deepskyblue1", "darkorange"), labels = c('B. anthracis','M. amphoriforme')) +
theme_minimal()+
theme(legend.text = element_text(face = "italic"))+
labs(x='Ct', y='Capture Efficiency (Proportion of Mapped Reads)', color = 'Organism')
#plot mean doc by organism
meandoc <- total_tbl %>% dplyr::select(organism.x, mean) %>% drop_na() %>%
ggplot(aes(x = organism.x, y=mean, fill=organism.x)) +
geom_boxplot(width = 0.5, alpha = 0.7) +
geom_jitter(width = 0.1, alpha = 0.5) +
scale_fill_manual(values=c("deepskyblue1", "darkorange")) +
theme_minimal() +
theme(legend.position = "none") +
scale_x_discrete(labels = c('B. anthracis','M. amphoriforme'))+
theme(axis.text.x = element_text(face = "italic"))+
ylab("Mean Depth-of-Coverage") +
xlab("Organism")
meandoc
#baited bases above 15
genomeabovefifteen<- total_tbl %>% dplyr::select(organism.x, `%_bases_above_15`) %>% drop_na() %>%
ggplot(aes(x = organism.x, y= as.numeric(`%_bases_above_15`), fill=organism.x)) +
geom_boxplot(width = 0.5, alpha = 0.7) +
geom_jitter(width = 0.1, alpha=0.5) +
scale_fill_manual(values=c("deepskyblue1", "darkorange")) +
theme_minimal() +
theme(legend.position = "none") +
scale_x_discrete(labels = c('B. anthracis','M. amphoriforme'))+
theme(axis.text.x = element_text(face = "italic"))+
ylab("Proportion Of Genome Above 15X") +
xlab("Organism")
genomeabovefifteen
#duplicates
duplicates <- total_tbl %>% dplyr::select(organism.x, duplicates, total.x) %>% drop_na() %>%
ggplot(aes(x = organism.x, y=duplicates/total.x, fill=organism.x)) +
geom_boxplot(width = 0.5, alpha = 0.7) +
geom_jitter(width = 0.1, alpha=0.5) +
scale_fill_manual(values=c("deepskyblue1", "darkorange")) +
theme_minimal() +
ylim(0,0.3) +
theme(legend.position = "none") +
scale_x_discrete(labels = c('B. anthracis','M. amphoriforme'))+
theme(axis.text.x = element_text(face = "italic"))+
ylab("Proportion Duplicates") +
xlab("Organism")
duplicates
#cap eff
fracmapped = total_tbl %>% dplyr::select(organism.x, frac_mapped, total.x) %>% drop_na() %>%
ggplot(aes(x = organism.x, y=frac_mapped, fill=organism.x)) +
geom_boxplot(width = 0.5, alpha = 0.7) +
geom_jitter(width = 0.1, alpha=0.5) +
scale_fill_manual(values=c("deepskyblue1", "darkorange")) +
theme_minimal() +
theme(legend.position = "none") +
scale_x_discrete(labels = c('B. anthracis','M. amphoriforme'))+
theme(axis.text.x = element_text(face = "italic"))+
ylab("Proportion Of Total Reads Mapped") +
xlab("Organism")
fracmapped
#############
#model inference
#fit a model to frac_mapped  (Jess says this is basically logistic regression)
m0 <- glm(data=total_tbl, frac_mapped ~ max_ct, family=binomial(link="logit"))
m1 <- glm(data=total_tbl, frac_mapped ~ organism.x*max_ct, family=binomial(link="logit"))
m2 <- glm(data=total_tbl, frac_mapped ~ organism.x+max_ct, family=binomial(link="logit"))
m3 <- glm(data=total_tbl, frac_mapped ~ organism.x*I(max_ct^2), family=binomial(link="logit"))
m4 <- glm(data=total_tbl, frac_mapped ~ organism.x*max_ct+organism.x*cap_lib_conc, family=binomial(link="logit"))
#create 'cap eff' from a vector of proportion column (successes v failures)
total_tbl$cap_eff = cbind(total_tbl$mapped, (total_tbl$total.x - total_tbl$mapped))
m5 <- glm(data=total_tbl, cap_eff ~ organism.x*max_ct+organism.x*cap_lib_conc, family=binomial(link="logit"))
m6 <- glm(data=total_tbl, cap_eff ~ organism.x*max_ct+organism.x*cap_lib_conc, family=binomial)
m7 <- glm(data=total_tbl, cap_eff ~ organism.x*max_ct+organism.x*cap_lib_conc, family=quasibinomial)
m7a <- glm(data=total_tbl, cap_eff ~ organism.x*max_ct+cap_lib_conc, family=quasibinomial)
m7b <- glm(data=total_tbl, cap_eff ~ organism.x+max_ct+cap_lib_conc, family=quasibinomial)
m7c <- glm(data=total_tbl, cap_eff ~ max_ct+cap_lib_conc, family=quasibinomial)
m7d <- glm(data=total_tbl, cap_eff ~ max_ct+cap_lib_conc, family=binomial)
?lme4
#fit glmm
total_tbl$rowid = seq(1, nrow(total_tbl))
total_tbl$rowid = as.factor(total_tbl$rowid)
m7e = glmer(data=total_tbl, cap_eff ~ max_ct+cap_lib_conc + (1|rowid), family = binomial)
summary(m7e)
drop1(m7e, test="Chisq")
drop1(m7f, test="Chisq")
MuMIn::r.squaredGLMM(m7e)
m7f = glm(data=total_tbl, qlogis(total_tbl$mapped/total_tbl$total.x) ~ max_ct+cap_lib_conc )
summary(m7f)
t = MuMIn::r.squaredGLMM(m7f)
s = anth_metadata$cap_lib_conc
c = as.numeric(anth_metadata[complete.cases(anth_metadata), ]$cap_lib_conc)
a = total_tbl %>% filter(sample_id != 'not-sequenced') %>% filter(organism.x == 'anthrax')
var(myco_metadata$cap_lib_conc)
hist(myco_metadata$cap_lib_conc)
hist(a$cap_lib_conc)
m8 = glmer(data=total_tbl, cap_eff ~ max_ct + (1|rowid), family = binomial)
m8a = glmer(data=total_tbl, cap_eff ~ cap_lib_conc + (1|rowid), family = binomial)
MuMIn::r.squaredGLMM(m8a)
modelplot = plot_model(m7e, type='eff', terms=c('max_ct'), show.values =T)+theme_minimal()+labs(y='Capture Efficiency', x='Ct', title = 'Model Predictions for Ct ~ Capture Efficiency' )
sjPlot::plot_models(m7e, type = 'pred')
summary(total_tbl$frac_mapped)
plot_grid(points, modelplot, labels=c('A', 'B'), rel_widths = c(1.3, 1))
View(total_tbl)
View(total_tbl)
View(anth_mapping)
View(anth_metadata)
View(myco_metadata)
View(myco_metadata)
#load and.or install packages we need
pkg = c("tidyverse", "data.table", "sjPlot", "cowplot", "RColorBrewer", "cowplot", "DHARMa", "lme4", "jtools", "MuMIn", "huxtable")
#install.packages(pkg) #install packages if you need them and load
new.packages <- pkg[!(pkg %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(pkg, require, character.only = TRUE)#
#func to read GATK DepthOfCoverage Summary csvs and take filename as a column
read_summarycov <- function(flnm) {
read_csv(flnm) %>%
mutate(filename = basename(flnm))
}
#read in anthrax and mycoplasma metadata (sample data, etc) - ST1
anth_metadata = read.csv('~/Projects/bactocap/ancillary/metadata/anthrax_sample_data.csv') %>% mutate(organism = 'anthrax')
#formyco we don't have amp cycles yet so add an na column for that field - ST2
myco_metadata = read.csv('~/Projects/bactocap/ancillary/metadata/myco_sample_data.csv') %>% dplyr::select(organism, sample_id, cap_lib_conc, init_lib_conc, max_ct) %>% add_column(bc_amp_cycles = NA)
#read myco mapping data
myco_mapping = read.csv("~/Projects/bactocap/ancillary/metadata/myco_mapping.csv")
#readd anth_mapping data
anth_mapping = read.csv("~/Projects/bactocap/ancillary/metadata/anth_mapping.csv")
#collect mapping data
anth_metadata = anth_metadata %>% left_join(anth_mapping)
myco_metadata = myco_metadata %>% left_join(myco_mapping)
##remove rubbish
sum_tbl = remove_rubbish(sum_tbl, ".sample_summary")
interval_tbl = remove_rubbish(sum_tbl, ".sample_interval_statistics")
anth_metadata = left_join(anth_metadata, sum_tbl %>% filter(organism == 'anthrax'), by = c('sample_id' = 'sample_id'))
myco_metadata = left_join(myco_metadata, sum_tbl %>% filter(organism == 'mycoplasma'), by = c('sample_id' = 'sample_id'))
anth_metadata = anth_metadata %>% mutate(amisuccessful= case_when(as.numeric(`%_bases_above_15`) > 80 ~ 'yes',
as.numeric(`%_bases_above_15`) < 80 ~ 'no'))
myco_metadata = myco_metadata %>% mutate(amisuccessful= case_when(as.numeric(`%_bases_above_15`) > 80 ~ 'yes',
as.numeric(`%_bases_above_15`) < 80 ~ 'no'))
anth_metadata = anth_metadata %>% mutate(frac_mapped = mapped/total.x)
anth_metadata = anth_metadata %>% mutate(frac_duplicates = duplicates/total.x)
myco_metadata = myco_metadata %>% mutate(frac_mapped = mapped/total.x)
myco_metadata = myco_metadata %>% mutate(frac_duplicates = duplicates/total.x)
write_csv(anth_metadata, "~/Projects/bactocap/metadata/anthrax_sample_sequencing_coverage_data_st1.csv")
write_csv(myco_metadata, "~/Projects/bactocap/metadata/mycoplasma_sample_sequencing_coverage_data_st2.csv")
x = anth_metadata %>% select(sample_id, organism.x, total.x, duplicates,mapped, mean, max_ct, bc_amp_cycles, cap_lib_conc, amisuccessful, `%_bases_above_15`)
y = myco_metadata %>% select(sample_id, organism.x, total.x, duplicates,mapped, mean, max_ct, bc_amp_cycles, cap_lib_conc, amisuccessful, `%_bases_above_15`)
total_tbl = rbind(x,y)
total_tbl$cap_lib_conc = as.numeric(total_tbl$cap_lib_conc)
total_tbl$`%_bases_above_15` = as.numeric(total_tbl$`%_bases_above_15`)
total_tbl %>% filter(organism.x == 'anthrax' & sample_id != 'not-sequenced') %>% group_by(bc_amp_cycles, amisuccessful) %>% summarise(countf = n())
total_tbl %>% filter(max_ct > 30 & sample_id != 'not-sequenced') %>% group_by(organism.x, amisuccessful) %>% summarise(n = n())
#create fracmapped column
total_tbl$frac_mapped = total_tbl$mapped/total_tbl$total.x
#define successful and unsuccessful samples as frac genome bases over 15X > 80%
total_tbl = total_tbl %>% mutate(amisuccessful= case_when(`%_bases_above_15` > 0.8 ~ 'yes',
`%_bases_above_15` < 0.8 ~ 'no'))
#wo
write_csv(total_tbl, '~/Projects/bactocap/metadata/all_metadata.csv')
#ct / cap eff
points = total_tbl %>% dplyr::select(max_ct, organism.x, frac_mapped) %>%
ggplot(aes(x=max_ct, y=frac_mapped, colour=organism.x))+
geom_point()+
scale_color_manual(values=c("deepskyblue1", "darkorange"), labels = c('B. anthracis','M. amphoriforme')) +
theme_minimal()+
theme(legend.text = element_text(face = "italic"))+
labs(x='Ct', y='Capture Efficiency (Proportion of Mapped Reads)', color = 'Organism')
View(total_tbl)
x = anth_metadata %>% select(sample_id, organism.x, total.x, duplicates,mapped, mean, max_ct, bc_amp_cycles, pooled, cap_lib_conc, amisuccessful, `%_bases_above_15`)
y = myco_metadata %>% select(sample_id, organism.x, total.x, duplicates,mapped, mean, max_ct, bc_amp_cycles, pooled, cap_lib_conc, amisuccessful, `%_bases_above_15`)
#formyco we don't have amp cycles yet so add an na column for that field - ST2
myco_metadata = read.csv('~/Projects/bactocap/ancillary/metadata/myco_sample_data.csv') %>% dplyr::select(organism, sample_id, cap_lib_conc, init_lib_conc, max_ct) %>% add_column(bc_amp_cycles = NA)
#formyco we don't have amp cycles yet so add an na column for that field - ST2
myco_metadata = read.csv('~/Projects/bactocap/ancillary/metadata/myco_sample_data.csv') %>% dplyr::select(organism, sample_id, pooled, cap_lib_conc, init_lib_conc, max_ct) %>% add_column(bc_amp_cycles = NA)
x = anth_metadata %>% select(sample_id, organism.x, total.x, duplicates,mapped, mean, max_ct, bc_amp_cycles, pooled, cap_lib_conc, amisuccessful, `%_bases_above_15`)
y = myco_metadata %>% select(sample_id, organism.x, total.x, duplicates,mapped, mean, max_ct, bc_amp_cycles, pooled, cap_lib_conc, amisuccessful, `%_bases_above_15`)
total_tbl = rbind(x,y)
sum_tbl = remove_rubbish(sum_tbl, ".sample_summary")
interval_tbl = remove_rubbish(sum_tbl, ".sample_interval_statistics")
#sum_tbl$sample_id <- sub("_[^_]+$", "", sum_tbl$sample_id)
anth_metadata = left_join(anth_metadata, sum_tbl %>% filter(organism == 'anthrax'), by = c('sample_id' = 'sample_id'))
myco_metadata = left_join(myco_metadata, sum_tbl %>% filter(organism == 'mycoplasma'), by = c('sample_id' = 'sample_id'))
anth_metadata = anth_metadata %>% mutate(amisuccessful= case_when(as.numeric(`%_bases_above_15`) > 80 ~ 'yes',
as.numeric(`%_bases_above_15`) < 80 ~ 'no'))
myco_metadata = myco_metadata %>% mutate(amisuccessful= case_when(as.numeric(`%_bases_above_15`) > 80 ~ 'yes',
as.numeric(`%_bases_above_15`) < 80 ~ 'no'))
anth_metadata = anth_metadata %>% mutate(frac_mapped = mapped/total.x)
anth_metadata = anth_metadata %>% mutate(frac_duplicates = duplicates/total.x)
myco_metadata = myco_metadata %>% mutate(frac_mapped = mapped/total.x)
myco_metadata = myco_metadata %>% mutate(frac_duplicates = duplicates/total.x)
write_csv(anth_metadata, "~/Projects/bactocap/metadata/anthrax_sample_sequencing_coverage_data_st1.csv")
write_csv(myco_metadata, "~/Projects/bactocap/metadata/mycoplasma_sample_sequencing_coverage_data_st2.csv")
#x = anth_metadata %>% select(-total.y, -secondary, -supplementary, -paired, -read1, -read2, -properly_paired, -with_itself_and_mate_mapped, -mate_on_diff_chr, -mate_on_diff_chrover5, -singletons, total.y, organism.y)
#y = myco_metadata %>% select(-total.y, -secondary, -supplementary, -paired, -read1, -read2, -properly_paired, -with_itself_and_mate_mapped, -mate_on_diff_chr, -mate_on_diff_chrover5, -singletons,total.y)
x = anth_metadata %>% select(sample_id, organism.x, total.x, duplicates,mapped, mean, max_ct, bc_amp_cycles, pooled, cap_lib_conc, amisuccessful, `%_bases_above_15`)
y = myco_metadata %>% select(sample_id, organism.x, total.x, dup
y = myco_metadata %>% select(sample_id, organism.x, total.x, duplicates,mapped, mean, max_ct, bc_amp_cycles, pooled, cap_lib_conc, amisuccessful, `%_bases_above_15`)
View(myco_metadata)
y = myco_metadata %>% select(sample_id, organism.x, total.x, duplicates,mapped, mean, max_ct, bc_amp_cycles, pooled, cap_lib_conc, amisuccessful, `%_bases_above_15`)
View(myco_metadata)
myco_metadata = myco_metadata %>% mutate(frac_mapped = mapped/total.x)
anth_metadata = left_join(anth_metadata, sum_tbl %>% filter(organism == 'anthrax'), by = c('sample_id' = 'sample_id'))
myco_metadata = left_join(myco_metadata, sum_tbl %>% filter(organism == 'mycoplasma'), by = c('sample_id' = 'sample_id'))
###############
#Read sample data and generate sample metadata dataframes
#this uses ST1 and ST2
#get our dirs
anthrax_dir <- c("~/Projects/bactocap/datasets/anthrax/results/")
myco_dir <- c("~/Projects/bactocap/datasets/mycoplasma/results/")
dirs <- c(anthrax_dir, myco_dir)
#read in anthrax and mycoplasma metadata (sample data, etc) - ST1
anth_metadata = read.csv('~/Projects/bactocap/ancillary/metadata/anthrax_sample_data.csv') %>% mutate(organism = 'anthrax')
#formyco we don't have amp cycles yet so add an na column for that field - ST2
myco_metadata = read.csv('~/Projects/bactocap/ancillary/metadata/myco_sample_data.csv') %>% dplyr::select(organism, sample_id, pooled, cap_lib_conc, init_lib_conc, max_ct) %>% add_column(bc_amp_cycles = NA)
#read myco mapping data
myco_mapping = read.csv("~/Projects/bactocap/ancillary/metadata/myco_mapping.csv")
#readd anth_mapping data
anth_mapping = read.csv("~/Projects/bactocap/ancillary/metadata/anth_mapping.csv")
#collect mapping data
anth_metadata = anth_metadata %>% left_join(anth_mapping)
myco_metadata = myco_metadata %>% left_join(myco_mapping)
#myco_mapping$
##remove rubbish
sum_tbl = remove_rubbish(sum_tbl, ".sample_summary")
interval_tbl = remove_rubbish(sum_tbl, ".sample_interval_statistics")
anth_metadata = left_join(anth_metadata, sum_tbl %>% filter(organism == 'anthrax'), by = c('sample_id' = 'sample_id'))
myco_metadata = left_join(myco_metadata, sum_tbl %>% filter(organism == 'mycoplasma'), by = c('sample_id' = 'sample_id'))
anth_metadata = anth_metadata %>% mutate(amisuccessful= case_when(as.numeric(`%_bases_above_15`) > 80 ~ 'yes',
as.numeric(`%_bases_above_15`) < 80 ~ 'no'))
myco_metadata = myco_metadata %>% mutate(amisuccessful= case_when(as.numeric(`%_bases_above_15`) > 80 ~ 'yes',
as.numeric(`%_bases_above_15`) < 80 ~ 'no'))
anth_metadata = anth_metadata %>% mutate(frac_mapped = mapped/total.x)
anth_metadata = anth_metadata %>% mutate(frac_duplicates = duplicates/total.x)
myco_metadata = myco_metadata %>% mutate(frac_mapped = mapped/total.x)
myco_metadata = myco_metadata %>% mutate(frac_duplicates = duplicates/total.x)
x = anth_metadata %>% select(sample_id, organism.x, total.x, duplicates,mapped, mean, max_ct, bc_amp_cycles, pooled, cap_lib_conc, amisuccessful, `%_bases_above_15`)
y = myco_metadata %>% select(sample_id, organism.x, total.x, duplicates,mapped, mean, max_ct, bc_amp_cycles, pooled, cap_lib_conc, amisuccessful, `%_bases_above_15`)
total_tbl = rbind(x,y)
total_tbl$cap_lib_conc = as.numeric(total_tbl$cap_lib_conc)
total_tbl$`%_bases_above_15` = as.numeric(total_tbl$`%_bases_above_15`)
total_tbl %>% filter(organism.x == 'anthrax' & sample_id != 'not-sequenced') %>% group_by(bc_amp_cycles, amisuccessful) %>% summarise(countf = n())
total_tbl %>% filter(max_ct > 30 & sample_id != 'not-sequenced') %>% group_by(organism.x, amisuccessful) %>% summarise(n = n())
#create fracmapped column
total_tbl$frac_mapped = total_tbl$mapped/total_tbl$total.x
#define successful and unsuccessful samples as frac genome bases over 15X > 80%
total_tbl = total_tbl %>% mutate(amisuccessful= case_when(`%_bases_above_15` > 0.8 ~ 'yes',
`%_bases_above_15` < 0.8 ~ 'no'))
#wo
write_csv(total_tbl, '~/Projects/bactocap/metadata/all_metadata.csv')
#ct / cap eff
points = total_tbl %>% dplyr::select(max_ct, organism.x, frac_mapped) %>%
ggplot(aes(x=max_ct, y=frac_mapped, colour=organism.x))+
geom_point()+
scale_color_manual(values=c("deepskyblue1", "darkorange"), labels = c('B. anthracis','M. amphoriforme')) +
theme_minimal()+
theme(legend.text = element_text(face = "italic"))+
labs(x='Ct', y='Capture Efficiency (Proportion of Mapped Reads)', color = 'Organism')
?case_when
total_tbl %>% mutate(pooledyesno = (case_when(pooled==1 ~ 'yes', TRUE ~ 'no')))
total_tabl = total_tbl %>% mutate(pooledyesno = (case_when(pooled==1 ~ 'yes', TRUE ~ 'no')))
total_table = total_tbl %>% mutate(pooledyesno = (case_when(pooled==1 ~ 'yes', TRUE ~ 'no')))
total_table %>% ggplot(aes(x=pooledyesno, y =frac_mapped))+geom_point()
total_table %>% ggplot(aes(x=pooledyesno, y =frac_mapped))+geom_boxplot()
total_table %>% ggplot(aes(x=pooledyesno, y =frac_mapped))+geom_boxplot()+geom_jitter()+facet_wrap(~organism.x)
m9 = glmer(data=total_tbl, cap_eff ~ cap_lib_conc + as.factor(pooledyesno) + (1|rowid), family = binomial)
m7e = glmer(data=total_tbl, cap_eff ~ max_ct+cap_lib_conc + (1|rowid), family = binomial)
summary(m7e)
drop1(m7e, test="Chisq")
drop1(m7f, test="Chisq")
MuMIn::r.squaredGLMM(m7e)
m7f = glm(data=total_tbl, qlogis(total_tbl$mapped/total_tbl$total.x) ~ max_ct+cap_lib_conc )
summary(m7f)
t = MuMIn::r.squaredGLMM(m7f)
s = anth_metadata$cap_lib_conc
c = as.numeric(anth_metadata[complete.cases(anth_metadata), ]$cap_lib_conc)
a = total_tbl %>% filter(sample_id != 'not-sequenced') %>% filter(organism.x == 'anthrax')
var(myco_metadata$cap_lib_conc)
hist(myco_metadata$cap_lib_conc)
hist(a$cap_lib_conc)
m8 = glmer(data=total_tbl, cap_eff ~ max_ct + (1|rowid), family = binomial)
m8a = glmer(data=total_tbl, cap_eff ~ cap_lib_conc + (1|rowid), family = binomial)
m9 = glmer(data=total_tbl, cap_eff ~ cap_lib_conc + as.factor(pooledyesno) + (1|rowid), family = binomial)
#create 'cap eff' from a vector of proportion column (successes v failures)
total_tbl$cap_eff = cbind(total_tbl$mapped, (total_tbl$total.x - total_tbl$mapped))
#fit glmm
total_tbl$rowid = seq(1, nrow(total_tbl))
total_tbl$rowid = as.factor(total_tbl$rowid)
m7e = glmer(data=total_tbl, cap_eff ~ max_ct+cap_lib_conc + (1|rowid), family = binomial)
summary(m7e)
drop1(m7e, test="Chisq")
drop1(m7f, test="Chisq")
MuMIn::r.squaredGLMM(m7e)
m7f = glm(data=total_tbl, qlogis(total_tbl$mapped/total_tbl$total.x) ~ max_ct+cap_lib_conc )
summary(m7f)
t = MuMIn::r.squaredGLMM(m7f)
s = anth_metadata$cap_lib_conc
c = as.numeric(anth_metadata[complete.cases(anth_metadata), ]$cap_lib_conc)
a = total_tbl %>% filter(sample_id != 'not-sequenced') %>% filter(organism.x == 'anthrax')
var(myco_metadata$cap_lib_conc)
hist(myco_metadata$cap_lib_conc)
hist(a$cap_lib_conc)
m8 = glmer(data=total_tbl, cap_eff ~ max_ct + (1|rowid), family = binomial)
m8a = glmer(data=total_tbl, cap_eff ~ cap_lib_conc + (1|rowid), family = binomial)
m9 = glmer(data=total_tbl, cap_eff ~ cap_lib_conc + as.factor(pooledyesno) + (1|rowid), family = binomial)
total_tbl = total_tbl %>% mutate(pooledyesno = (case_when(pooled==1 ~ 'yes', TRUE ~ 'no')))
total_table %>% ggplot(aes(x=pooledyesno, y =frac_mapped))+geom_boxplot()+geom_jitter()+facet_wrap(~organism.x)
#fit a model to frac_mapped  (Jess says this is basically logistic regression)
m0 <- glm(data=total_tbl, frac_mapped ~ max_ct, family=binomial(link="logit"))
m1 <- glm(data=total_tbl, frac_mapped ~ organism.x*max_ct, family=binomial(link="logit"))
m2 <- glm(data=total_tbl, frac_mapped ~ organism.x+max_ct, family=binomial(link="logit"))
m3 <- glm(data=total_tbl, frac_mapped ~ organism.x*I(max_ct^2), family=binomial(link="logit"))
m4 <- glm(data=total_tbl, frac_mapped ~ organism.x*max_ct+organism.x*cap_lib_conc, family=binomial(link="logit"))
#create 'cap eff' from a vector of proportion column (successes v failures)
total_tbl$cap_eff = cbind(total_tbl$mapped, (total_tbl$total.x - total_tbl$mapped))
m5 <- glm(data=total_tbl, cap_eff ~ organism.x*max_ct+organism.x*cap_lib_conc, family=binomial(link="logit"))
m6 <- glm(data=total_tbl, cap_eff ~ organism.x*max_ct+organism.x*cap_lib_conc, family=binomial)
m7 <- glm(data=total_tbl, cap_eff ~ organism.x*max_ct+organism.x*cap_lib_conc, family=quasibinomial)
m7a <- glm(data=total_tbl, cap_eff ~ organism.x*max_ct+cap_lib_conc, family=quasibinomial)
m7b <- glm(data=total_tbl, cap_eff ~ organism.x+max_ct+cap_lib_conc, family=quasibinomial)
m7c <- glm(data=total_tbl, cap_eff ~ max_ct+cap_lib_conc, family=quasibinomial)
m7d <- glm(data=total_tbl, cap_eff ~ max_ct+cap_lib_conc, family=binomial)
m9 = glmer(data=total_tbl, cap_eff ~ cap_lib_conc + as.factor(pooledyesno) + (1|rowid), family = binomial)
drop1(m9)
drop1(m9, test='Chisq')
m9 = glmer(data=total_tbl, cap_eff ~ max_ct + cap_lib_conc + as.factor(pooledyesno) + (1|rowid), family = binomial)
drop1(m9, test='Chisq')
summary(m9)
MuMIn::r.squaredGLMM(9)
MuMIn::r.squaredGLMM(m9)
drop1(m9, test='Chisq')
MuMIn::r.squaredGLMM(m9)
modelplot = plot_model(m7e, type='eff', terms=c('max_ct'), show.values =T)+theme_minimal()+labs(y='Capture Efficiency', x='Ct', title = 'Model Predictions for Ct ~ Capture Efficiency' )
modelplot = plot_model(m9, type='eff', terms=c('max_ct'), show.values =T)+theme_minimal()+labs(y='Capture Efficiency', x='Ct', title = 'Model Predictions for Ct ~ Capture Efficiency' )
sjPlot::plot_models(m9, type = 'pred')
m9 = glmer(data=total_tbl, cap_eff ~ max_ct + cap_lib_conc + as.factor(pooledyesno) + (1|rowid), family = binomial)
sjPlot::plot_models(m9, type = 'pred')
modelplot = plot_model(m9, type='pred', terms=c('max_ct'), show.values =T)+theme_minimal()+labs(y='Capture Efficiency', x='Ct', title = 'Model Predictions for Ct ~ Capture Efficiency' )
modelplot
total_table %>% ggplot(aes(x=pooledyesno, y =frac_mapped))+geom_boxplot()+geom_jitter()+facet_wrap(~organism.x)
total_table %>% ggplot(aes(x=pooledyesno, y =frac_mapped))+geom_boxplot()+geom_jitter()+facet_wrap(~organism.x) + labs(x='Was The Sample Pooled?')
total_table %>% ggplot(aes(x=pooledyesno, y =frac_mapped))+geom_boxplot()+geom_jitter()+facet_wrap(~organism.x) + labs(x='Was The Sample Pooled?', y='Capture Efficiency')
total_table %>% ggplot(aes(x=pooledyesno, y =frac_mapped))+geom_boxplot()+geom_jitter()+facet_wrap(~organism.x) + labs(x='Was The Sample Pooled?', y='Capture Efficiency')+scale_x_discrete(labels = c('B. anthracis','M. amphoriforme'))+
#fit a model to frac_mapped  (Jess says this is basically logistic regression)
m0 <- glm(data=total_tbl, frac_mapped ~ max_ct, family=binomial(link="logit"))
total_table %>% ggplot(aes(x=pooledyesno, y =frac_mapped))+geom_boxplot()+geom_jitter()+facet_wrap(~organism.x) + labs(x='Was The Sample Pooled?', y='Capture Efficiency')+ scale_x_discrete(labels = c('B. anthracis','M. amphoriforme'))
total_table %>% ggplot(aes(x=pooledyesno, y =frac_mapped))+geom_boxplot()+geom_jitter()+facet_wrap(~organism.x) + labs(x='Was The Sample Pooled?', y='Capture Efficiency')+ theme(strip.text.x(labels = c('B. anthracis','M. amphoriforme')))
total_table %>%
ggplot(aes(x=pooledyesno, y =frac_mapped))+
geom_boxplot()+
geom_jitter()+
facet_wrap(~organism.x) +
labs(x='Was The Sample Pooled?', y='Capture Efficiency')+
theme(strip.text.x(labels = c('B. anthracis','M. amphoriforme')))
total_table %>%
ggplot(aes(x=pooledyesno, y =frac_mapped))+
geom_boxplot()+
geom_jitter()+
facet_wrap(~organism.x) +
labs(x='Was The Sample Pooled?', y='Capture Efficiency')
total_table %>%
ggplot(aes(x=pooledyesno, y =frac_mapped))+
geom_boxplot()+
geom_jitter()+
facet_wrap(~organism.x) +
labs(x='Was The Sample Pooled?', y='Capture Efficiency')+
theme_minimal()
m9a = glmer(data=total_tbl, cap_eff ~ as.factor(pooledyesno) + (1|rowid), family = binomial)
MuMIn::r.squaredGLMM(m9a)
View(modelplot)
#ls pkg
pkg = c("tidyverse", "cowplot", "RColorBrewer", "cowplot", "pheatmap")
#install.packages(pkg) #install packages if you need them and load
new.packages <- pkg[!(pkg %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(pkg, require, character.only = TRUE)#
setwd('~/Projects/bactocap/datasets/mlst/')
source('~/Projects/bactocap/bin/mlst_fullset.R')
plot(cars)
glm(newfst ~ newdist, data = formspec)
pkg = c('tidyverse', 'geosphere', 'data.table', 'vegan' ,'cowplot', 'igraph', 'Rcpp', 'RColorBrewer', 'UpSetR', 'sparseAHC', 'adegenet')
#install.packages(pkg) #install packages if you need them and load
new.packages <- pkg[!(pkg %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(pkg, require, character.only = TRUE)#
#remotes::install_github("khabbazian/sparseAHC")
#set num cores
numcores = 10
#set wd and read our shit
setwd('~/Projects/MOVE/td_je_angam_2022/data/')
fst_by_site = read.csv('fst_betweensites.csv')
metadata = read.csv('../metadata/sequenced_metadata.csv')
#create poplists for angsd analysis, output as txt files for upload to hpc
#for (form in c('M', 'S')) {
#  for (site in unique(metadata$Site)) {
#    x = metadata[metadata$Site == site,]
#    t = x[x$Form == form,]$bamid
#    write(t, paste0('~/Projects/MOVE/data/anopheles_03_21_DW/metadata/', site, '_', form, '.pop'))
#  }
#}
#metadata subset to latlong
lalo = metadata[c('Site', 'long', 'Lat')]
#double join here (joins metadata to both sides of fst data (site a and site b))
fst_loc = merge(
x = merge(x=fst_by_site,
y=lalo,
by.x="site_a",
by.y="Site")[],
y=lalo,
by.x="site_b",
by.y = 'Site'
)[]
fst_loc = unique(fst_loc)
#make point dist between coords
fst_loc$pointdist = distVincentyEllipsoid(fst_loc[,c('Lat.x','long.x')], fst_loc[,c('Lat.y','long.y')])
#there's probably quite a bit of noise here (lots of small sample sizes etc), so let's filter our data down a bit
fst_loc$Form = fst_loc$form_a
#create a vector of sites/form that have N >= 8 (arbitrarily chosen)
filtsites = data.table(metadata)[, .N, by=.(Form, Site)][ N >= 5 ]
#create id list for filtering
site_filt_vec = paste0(filtsites$Site, '_', filtsites$Form)
fst_loc$ida = paste0(fst_loc$site_a, '_', fst_loc$Form)
fst_loc$idb = paste0(fst_loc$site_b, '_', fst_loc$Form)
#filter based on above
x = subset(fst_loc, idb %in% site_filt_vec)
y = subset(x, ida %in% site_filt_vec)
y = y[complete.cases(y), ]
formspec = y[y$Form == c('M'),]
formspec$newfst = formspec$weighted_fst / (1-formspec$weighted_fst)
formspec$newdist = log10(formspec$pointdist)
e = as.dist(xtabs(formspec$weighted_fst ~ formspec$site_b + formspec$site_a))
f = as.dist(xtabs(formspec$newdist ~ formspec$site_b + formspec$site_a))
e
plot(e, f)
abline(lm(e~f), col="red",lty=2)
t = vegan::mantel(e,f)
t
m_test = mantel.randtest(e,f)
m_test
plot(m_test)
glm(newfst ~ newdist, data = formspec)
glm(newfst ~ newdist, data = formspec, family='gaussian')
t = glm(newfst ~ newdist, data = formspec, family='gaussian')
summary(t)
formspec = y[y$Form == c('S'),]
formspec$newfst = formspec$weighted_fst / (1-formspec$weighted_fst)
formspec$newdist = log10(formspec$pointdist)
e = as.dist(xtabs(formspec$weighted_fst ~ formspec$site_b + formspec$site_a))
f = as.dist(xtabs(formspec$newdist ~ formspec$site_b + formspec$site_a))
e
plot(e, f)
abline(lm(e~f), col="red",lty=2)
t = vegan::mantel(e,f)
t
m_test = mantel.randtest(e,f)
m_test
plot(m_test)
t = glm(newfst ~ newdist, data = formspec, family='gaussian')
summary(t)
library(MASS)
dens <- kde2d(e,f, n=300)
myPal <- colorRampPalette(c("white","blue","gold", "orange", "red"))
plot(e, f, pch=20,cex=.5)
image(dens, col=transp(myPal(300),.7), add=TRUE)
abline(lm(e~f))
title("Isolation by distance plot")
formspec = y[y$Form == c('M'),]
formspec$newfst = formspec$weighted_fst / (1-formspec$weighted_fst)
formspec$newdist = log10(formspec$pointdist)
e = as.dist(xtabs(formspec$weighted_fst ~ formspec$site_b + formspec$site_a))
f = as.dist(xtabs(formspec$newdist ~ formspec$site_b + formspec$site_a))
e
plot(e, f)
abline(lm(e~f), col="red",lty=2)
t = vegan::mantel(e,f)
t
m_test = mantel.randtest(e,f)
m_test
plot(m_test)
t = glm(newfst ~ newdist, data = formspec, family='gaussian')
summary(t)
library(MASS)
dens <- kde2d(e,f, n=300)
myPal <- colorRampPalette(c("white","blue","gold", "orange", "red"))
plot(e, f, pch=20,cex=.5)
image(dens, col=transp(myPal(300),.7), add=TRUE)
abline(lm(e~f))
title("Isolation by distance plot")
