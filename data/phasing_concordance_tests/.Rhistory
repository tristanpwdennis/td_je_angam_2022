res = resdf[resdf$collection.year.x == strat.x & collection.year.y == strat.y]
rabmat = pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab)
rabmat = rabmat[,-1] #remove row ids
rabmat = as.dist(rabmat, upper = FALSE) #take lower triangle to dist matrix object
distmat = pivot_wider(res[,c('a', 'b', 'dist')], names_from = a, values_from = dist)
distmat = distmat[,-1] #remove row ids
distmat = as.dist(distmat, upper = FALSE) #take lower triangle to dist matrix object
ibd = mantel.randtest(rabmat, distmat)
return(ibd)
}
calc_isobd(res, 2008, 2008)
#calculate distance between each point/sample
res$dist = distGeo(res[,c('lat.x','long.x')], res[,c('lat.y','long.y')])
calc_isobd(res, 2008, 2008)
#
calc_isobd <- function(resdf, strat.x, strat.y) {
resdf = resdf[resdf$collection.year.x == strat.x & collection.year.y == strat.y]
rabmat = pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab)
rabmat = rabmat[,-1] #remove row ids
rabmat = as.dist(rabmat, upper = FALSE) #take lower triangle to dist matrix object
distmat = pivot_wider(res[,c('a', 'b', 'dist')], names_from = a, values_from = dist)
distmat = distmat[,-1] #remove row ids
distmat = as.dist(distmat, upper = FALSE) #take lower triangle to dist matrix object
ibd = mantel.randtest(rabmat, distmat)
return(ibd)
}
calc_isobd(res, 2008, 2008)
resdf = res
resdf = resdf[resdf$collection.year.x == strat.x & collection.year.y == strat.y]
resdf = res
strat.x = 2008
strat.y=2008
resdf = resdf[resdf$collection.year.x == strat.x & collection.year.y == strat.y]
rabmat = pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab)
rabmat = rabmat[,-1] #remove row ids
rabmat = as.dist(rabmat, upper = FALSE) #take lower triangle to dist matrix object
distmat = pivot_wider(res[,c('a', 'b', 'dist')], names_from = a, values_from = dist)
distmat = distmat[,-1] #remove row ids
distmat = as.dist(distmat, upper = FALSE) #take lower triangle to dist matrix object
ibd = mantel.randtest(rabmat, distmat)
return(ibd)
distmat = pivot_wider(res[,c('a', 'b', 'dist')], names_from = a, values_from = dist)
distmat = distmat[,-1] #remove row ids
distmat = as.dist(distmat, upper = FALSE) #take lower triangle to dist matrix object
rabmat = pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab)
rabmat = rabmat[,-1] #remove row ids
resdf
rabmat = pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab)
View(rabmat)
resdf = resdf[resdf$collection.year.x == strat.x & collection.year.y == strat.y]
rabmat = pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab)
rabmat = rabmat[,-1] #remove row ids
rabmat = as.dist(rabmat, upper = FALSE) #take lower triangle to dist matrix object
distmat = pivot_wider(resdf[,c('a', 'b', 'dist')], names_from = a, values_from = dist)
distmat = distmat[,-1] #remove row ids
distmat = as.dist(distmat, upper = FALSE) #take lower triangle to dist matrix object
ibd = mantel.randtest(rabmat, distmat)
return(ibd)
#
calc_isobd <- function(resdf, strat.x, strat.y) {
resdf = resdf[resdf$collection.year.x == strat.x & collection.year.y == strat.y]
rabmat = pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab)
rabmat = rabmat[,-1] #remove row ids
rabmat = as.dist(rabmat, upper = FALSE) #take lower triangle to dist matrix object
distmat = pivot_wider(resdf[,c('a', 'b', 'dist')], names_from = a, values_from = dist)
distmat = distmat[,-1] #remove row ids
distmat = as.dist(distmat, upper = FALSE) #take lower triangle to dist matrix object
ibd = mantel.randtest(rabmat, distmat)
return(ibd)
}
calc_isobd(res, 2008, 2008)
levels(res$collection.year.x)
unique(res$collection.year.x)
c(2008, 2014, 2016, 2018, 2020)
years = c(2008, 2014, 2016, 2018, 2020)
#test for isobd for each year of sampling
calc_isobd <- function(yr) {
resdf = res
resdf = resdf[resdf$collection.year.x == yr & collection.year.y == yr]
rabmat = pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab)
rabmat = rabmat[,-1] #remove row ids
rabmat = as.dist(rabmat, upper = FALSE) #take lower triangle to dist matrix object
distmat = pivot_wider(resdf[,c('a', 'b', 'dist')], names_from = a, values_from = dist)
distmat = distmat[,-1] #remove row ids
distmat = as.dist(distmat, upper = FALSE) #take lower triangle to dist matrix object
ibd = mantel.randtest(rabmat, distmat)
return(ibd)
}
unique(res$collection.year.x)
years = c(2008, 2014, 2016, 2018, 2020)
lapply(years, calc_isobd)
isos = lapply(years, calc_isobd)
lapply(isos, plot)
isplots = lapply(isos, plot)
grid.arrange(isplots)
do.call(grid.arrange, isplots)
isplots
lapply(isos, plot)
x = lapply(isos, plot)
x[[1]]
x[[2]]
do.call(grid.arrange, lapply(isos, plot))
x = lapply(isos, plot)
par(mfrow = c(2,3))
x = lapply(isos, plot)
x = lapply(isos, plot, main=x)
x = lapply(seq_along(1:length(isos)), plot(isos[[i]]), main=isos[[i]])
x = lapply(seq_along(1:length(isos)), plot(isos[[i]]), main=years[[i]])
x = lapply(isos, plot)
#run on all years
years = c(2008, 2014, 2016, 2018, 2020)
isos = lapply(years, calc_isobd)
#plot ibd plots
par(mfrow = c(2,3))
x = lapply(isos, plot)
plot(isos[[1]])
main=years[[1]]
plot(isos[[1]], main=years[[1]])
x = lapply(seq_along(1:length(isos), plot(isos[[i]], main=years[[i]]))
x = lapply(seq_along(1:length(isos)), function(i){plot(isos[[i]], main=years[[i]])})
x = lapply(seq_along(1:length(isos)), function(i){plot(isos[[i]], main=years[[i]])})
#plot ibd plots
par(mfrow = c(2,3))
x = lapply(seq_along(1:length(isos)), function(i){plot(isos[[i]], main=years[[i]])})
isos = lapply(years, calc_isobd,res)
#test for isobd for each year of sampling
calc_isobd <- function(yr, resdf) {
resdf = resdf[resdf$collection.year.x == yr & collection.year.y == yr]
rabmat = pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab)
rabmat = rabmat[,-1] #remove row ids
rabmat = as.dist(rabmat, upper = FALSE) #take lower triangle to dist matrix object
distmat = pivot_wider(resdf[,c('a', 'b', 'dist')], names_from = a, values_from = dist)
distmat = distmat[,-1] #remove row ids
distmat = as.dist(distmat, upper = FALSE) #take lower triangle to dist matrix object
ibd = mantel.randtest(rabmat, distmat)
return(ibd)
}
#run on all years
years = c(2008, 2014, 2016, 2018, 2020)
isos = lapply(years, calc_isobd,res)
#plot ibd plots
par(mfrow = c(2,3))
x = lapply(seq_along(1:length(isos)), function(i){plot(isos[[i]], main=years[[i]])})
x = lapply(seq_along(1:length(isos)), function(i){plot(isos[[i]], main=years[[i]])})
x = lapply(seq_along(1:length(isos)), function(i){plot(isos[[i]], main=years[[i]])})
x = lapply(seq_along(1:length(isos)), function(i){plot(isos[[i]], main=years[[i]])})
#plot ibd plots
par(mfrow = c(2,3))
x = lapply(seq_along(1:length(isos)), function(i){plot(isos[[i]], main=years[[i]])})
isos = lapply(years, calc_isobd,res)
newisos = lapply(years, calc_isobd,newres)
newres = res[res$lat.x < 9.8 & lat.y < 9.8] #excluding outgroup sample
geogendist = ggplot(res[res$sameyearyesno == 1], aes(x=dist, y=rab))+
geom_point()+
theme_classic()+
facet_wrap(~yearcomp)
#test for isobd for each year of sampling
calc_isobd <- function(yr, resdf) {
resdf = resdf[resdf$collection.year.x == yr & collection.year.y == yr]
rabmat = pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab)
rabmat = rabmat[,-1] #remove row ids
rabmat = as.dist(rabmat, upper = FALSE) #take lower triangle to dist matrix object
distmat = pivot_wider(resdf[,c('a', 'b', 'dist')], names_from = a, values_from = dist)
distmat = distmat[,-1] #remove row ids
distmat = as.dist(distmat, upper = FALSE) #take lower triangle to dist matrix object
ibd = mantel.randtest(rabmat, distmat)
return(ibd)
}
#run on all years
years = c(2008, 2014, 2016, 2018, 2020)
isos = lapply(years, calc_isobd,res)
newisos = lapply(years, calc_isobd,newres)
#plot ibd plots
par(mfrow = c(2,3))
x = lapply(seq_along(1:length(isos)), function(i){plot(isos[[i]], main=years[[i]])})
#plot ibd plots
par(mfrow = c(2,3))
x = lapply(seq_along(1:length(newisos)), function(i){plot(newisos[[i]], main=years[[i]])})
library(data.table)
library(gghalves)
setwd('~/Projects/MOVE/td_je_angam_2022/data/phasing_concordance_tests/')
saf_concordance = fread('gc_saf.txt')
saf_concordance$ind = gsub("_.*","",saf_concordance$id)
saf_concordance$cov = gsub(".*.core.","",gsub(".list..*","",saf_concordance$id))
#saf_concordance$cov = as.numeric(saf_concordance$cov)
saf_concordance[saf_concordance$cov != 'full']
colnames(saf_concordance) = c('row','fn','GCsAF','id','allele_frequency','RR_Hom_matches','RA_Het_matches','AA_Hom_matches','RR_Hom_mismatches','RA_Het_mismatches','AA_Hom_mismatches','dosage_r-squared','number_of_genotypes', 'ind', 'cov')
hist(saf_concordance$`dosage_r-squared`)
hist(saf_concordance$allele_frequency)
ggplot(saf_concordance[saf_concordance$fn == 'ind20_m_form.core.10.list.AgamP4_3L_phasedb4.0.vcf.gz.concstats.gcsaf'],(aes(x=allele_frequency,y=`dosage_r-squared`)))+
geom_line()
#read samplewide concordance summary table
x = fread('gcss.txt')
x$form = gsub("^[^_]*_","",gsub(".core.*","",x$id))
x$cov = gsub(".*.core.","",gsub(".list..*","",x$id))
colnames(x) = c('row','fn','gcs','id','sample','nonreference_discordance_rate','RR_Hom_matches','RA_Het_matches','AA_Hom_matches','RR_Hom_mismatches','RA_Het_mismatches','AA_Hom_mismatches','dosage_rsquared', 'form', 'cov')
x = x[x$form == 'm_form']
x$cov <- factor(x$cov, levels=rev(c('full', '10', '7.5', '5', '2.5', '1', '0.5')))
ggplot(x, aes(x=cov, y=dosage_rsquared))+
geom_half_point(range_scale = 0.1, side='l')+
geom_half_violin(side='r')+
theme_classic()+
labs(x='Depth of Coverage', y='Dosage R-Squared')
#get Burkina Faso map
gh<-getData('GADM', country="GHA", level=1)
gh2<-getData('GADM', country="GHA", level=2)
gh3<-getData('GADM', country="GHA", level=3)
plot(gh, col='grey90', bg='grey', ylim=c(9.5,11), xlim=c(-5,-3.8), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude')
plot(gh, col='grey90', bg='grey', ylim=c(9.5,11), xlim=c(-5,-3.8), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude')
plot(gh, col='grey90', bg='grey', ylim=c(9.5,11), xlim=c(-5,1.5), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude')
plot(gh, col='grey90', bg='grey', ylim=c(9.5,11), xlim=c(-5,1.2), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude')
plot(gh, col='grey90', bg='grey', ylim=c(9.5,11), xlim=c(-5,1.1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude')
plot(gh, col='grey90', bg='grey', ylim=c(9.5,11), xlim=c(-5,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude')
plot(gh, col='grey90', bg='grey', ylim=c(9.5,11), xlim=c(-4,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude')
plot(gh, col='grey90', bg='grey', ylim=c(9.5,11), xlim=c(-3.6,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude')
plot(gh, col='grey90', bg='grey', ylim=c(5,11), xlim=c(-3.6,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude')
plot(gh2, col='grey90', bg='grey', ylim=c(5,11), xlim=c(-3.6,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude')
plot(gh2, col=NA, bg='grey', ylim=c(5,11), xlim=c(-3.6,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude', add=T)
plot(gh2, col=NA, bg='grey', ylim=c(5,11), xlim=c(-3.6,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude', add=T, border = 'darkgrey')
plot(gh2, col=NA, bg='grey', ylim=c(5,11), xlim=c(-3.6,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude', border = 'darkgrey')
plot(gh2, col=NA, bg='grey', ylim=c(5,11), xlim=c(-3.6,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude', add=T, border = 'darkgrey')
plot(gh2, col=NA, bg='grey', ylim=c(5,11), xlim=c(-3.6,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude', add=T, border = 'darkgrey')
plot(gh2, col=NA, bg='grey', ylim=c(5,11), xlim=c(-3.6,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude',border = 'darkgrey')
plot(gh2, col=NA, bg='grey', ylim=c(5,11), xlim=c(-3.6,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude', add=T, border = 'darkgrey')
plot(gh2, col=NA, bg='grey', ylim=c(5,11), xlim=c(-3.6,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude', add=T, border = 'darkgrey')
plot(gh2, col=NA, bg='grey', ylim=c(5,11), xlim=c(-3.6,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude')
plot(gh2, col='grey90', bg='grey', ylim=c(5,11), xlim=c(-3.6,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude', border='darkgrey' , add=T)
par(mfrow=c(1,1), mar=c(5,5,2,1), mgp=c(2.2,0.8,0), cex.lab=1.4,cex.axis=1.2)
plot(gh2, col='grey90', bg='grey', ylim=c(5,11), xlim=c(-3.6,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude', border='darkgrey' , add=T)
plot(gh, col='grey90', bg='grey', ylim=c(5,11), xlim=c(-3.6,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude', border='darkgrey' , add=T)
plot(gh2, col='grey90', bg='grey', ylim=c(9.5,11), xlim=c(-1,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude')
plot(gh, col=NULL, bg='grey', border='blue' , add=T)
points(metadata$lat~metadata$long, col=rgb(red=160/255, green=205/255, blue=90/255, alpha=0.1), pch=20, cex=0.8)
plot(gh2, col='grey90', bg='grey', ylim=c(9,11), xlim=c(-1,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude')
plot(gh, col=NULL, bg='grey', border='blue' , add=T)
points(metadata$lat~metadata$long, col=rgb(red=160/255, green=205/255, blue=90/255, alpha=0.1), pch=20, cex=0.8)
points(metadata$lat~metadata$long, col=rgb(red=160/255, green=205/255, blue=90/255, alpha=0.1), pch=20, cex=1)
points(metadata$lat~metadata$long, col=rgb(red=160/255, green=205/255, blue=90/255, alpha=0.1), pch=20, cex=2)
plot(gh2, col='grey90', bg='bisque2', ylim=c(9,11), xlim=c(-1,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude')
plot(gh, col=NULL, bg='bisque2', border='blue' , add=T)
plot(gh2, col='bisque2', bg='bisque2', ylim=c(9,11), xlim=c(-1,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude')
plot(gh, col=NULL, bg='bisque2', border='bisque4' , add=T)
plot(gh2, col='bisque2', bg='bisque2', ylim=c(9,11), xlim=c(-1,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude')
plot(gh, col=NULL, bg='bisque2', border='bisque4' , add=T)
plot(gh, col=NULL, bg='bisque2', border='blue' , add=T)
plot(gh2, col='burlywood1', bg='burlywood1', ylim=c(9,11), xlim=c(-1,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude')
plot(gh2, col='burlywood', bg='burlywood', ylim=c(9,11), xlim=c(-1,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude')
plot(gh2, col='moccasin', bg='moccasin', ylim=c(9,11), xlim=c(-1,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude')
plot(gh, col=NULL, bg='moccasin', border='navajowhite4' , add=T)
plot(gh2, col='moccasin', bg='moccasin', ylim=c(9,11), xlim=c(-1,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude', border='moccasin')
plot(gh2, col='moccasin', bg='moccasin', ylim=c(9,11), xlim=c(-1,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude', border='moccasin')
plot(gh, col=NULL, bg='moccasin', border='navajowhite4' , add=T)
plot(gh2, col='navajowhite4', bg='moccasin', ylim=c(9,11), xlim=c(-1,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude')
plot(gh2, col='moccasin', bg='moccasin', ylim=c(9,11), xlim=c(-1,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude')
plot(gh, col=NULL, bg='moccasin', border='navajowhite4' , add=T)
points(metadata$lat~metadata$long, col=rgb(red=160/255, green=205/255, blue=90/255, alpha=0.1), pch=20, cex=2)
points(cluster_coords$lat~cluster_coords$lon, col='darkred',cex=2, lwd=1, pch=20)
points(metadata$lat~metadata$long, col='olivedrab4', pch=20, cex=2)
metadata$collection.year ==2008
metadata[metadata$collection.year ==2008]
metadata[metadata$collection.year ==2008][c('lat, long')]
metadata[metadata$collection.year ==2008][c('lat, long'),]
metadata[metadata$collection.year ==2008][,c('lat, long')]
metadata[metadata$collection.year ==2008][,1]
metadata[metadata$collection.year ==2008][,c('lat', 'long')]
plot_map_tp <- function(year) {
pmetadata = metadata[metadata$collection.year ==2008]
plot(gh2, col='moccasin', bg='moccasin', ylim=c(9,11), xlim=c(-1,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude')
plot(gh, col=NULL, bg='moccasin', border='navajowhite4' , add=T)
points(pmetadata$lat~pmetadata$long, col='olivedrab4', pch=20, cex=2)
}
lapply(years, plot_map_tp)
pmetadata = metadata[metadata$collection.year ==2008]
plot(gh2, col='moccasin', bg='moccasin', ylim=c(9,11), xlim=c(-1,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude')
plot(gh, col=NULL, bg='moccasin', border='navajowhite4' , add=T)
plot(gh, bg='moccasin', border='navajowhite4' , add=T)
points(pmetadata$lat~pmetadata$long, col='olivedrab4', pch=20, cex=2)
lapply(years, plot_map_tp)
plot_map_tp <- function(year) {
pmetadata = metadata[metadata$collection.year ==2008]
plot(gh2, col='moccasin', bg='moccasin', ylim=c(9,11), xlim=c(-1,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude')
plot(gh, bg='moccasin', border='navajowhite4' , add=T)
points(pmetadata$lat~pmetadata$long, col='olivedrab4', pch=20, cex=2)
}
lapply(years, plot_map_tp)
par(mfrow = c(2,3))
lapply(years, plot_map_tp)
plot_map_tp <- function(year) {
pmetadata = metadata[metadata$collection.year ==year]
plot(gh2, col='moccasin', bg='moccasin', ylim=c(9,11), xlim=c(-1,1), mar=c(0,0,0,0), xlab='Longitude', ylab='Latitude')
plot(gh, bg='moccasin', border='navajowhite4' , add=T)
points(pmetadata$lat~pmetadata$long, col='olivedrab4', pch=20, cex=2)
}
par(mfrow = c(2,3))
lapply(years, plot_map_tp)
?ade4:amova()
?ade4:amova()
?poppr::amova
####ILandscape genetic analysis of PMI samples
#load env and metadata
pkg = c("tidyverse", "gridExtra", "RColorBrewer", "moments", "poppr" , "data.table", "sf", "geosphere", 'UpSetR', 'raster', 'igraph', 'adegenet', 'vegan')
#install.packages(pkg) #install packages if you need them and load
new.packages <- pkg[!(pkg %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(pkg, require, character.only = TRUE)#
path='~/Projects/MOVE/anopheles_pmi_cnrfp/'
?poppr::amova
resdf=res
rabmat = pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab)
rabmat = rabmat[,-1] #remove row ids
rabmat = as.dist(rabmat, upper = FALSE) #take lower triangle to dist matrix object
rabmat = pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab)
rabmat = rabmat[,-1] #remove row ids
View(rabmat)
res$a
res$b
rabmat
metadata$sample_id
res$sample_id.x
metadata$sample_id
rownames(rabmat) = metadata$sample_id
length(metadata$sample_id)
nrow(rabmat)
View(rabmat)
rabmat = pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab)
View(rabmat)
rabmat = rabmat[,-1] #remove row ids
View(rabmat)
View(metadata)
rabmat = pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab)
View(rabmat)
View(rabmat)
rbind(rabmat, NA)
rbind(NA, rabmat)
rabmat = rbind(NA, rabmat)
rabmat = pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab)
rabmat = rbind(NA, rabmat)
rabmat = as.dist(rabmat, upper = FALSE) #take lower triangle to dist matrix object
rabmat = pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab)
#rabmat = rabmat[,-1] #remove row ids
rabmat = rbind(NA, rabmat)
View(rabmat)
rabmat = rabmat[,-1] #remove row ids
View(rabmat)
rabmat = pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab)
rabmat = rbind(NA, rabmat)
View(rabmat)
rabmat = rabmat[,-1] #remove row ids
rabmat = as.dist(rabmat, upper = FALSE) #take lower triangle to dist matrix object
resdf = resdf[resdf$collection.year.x == yr & collection.year.y == yr]
rabmat = pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab)
rabmat = rbind(NA, rabmat)
rabmat = rabmat[,-1] #remove row ids
rabmat = pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab)
#rabmat = rbind(NA, rabmat)
rabmat = rabmat[,-1] #remove row ids
View(rabmat)
length(resdf$a)
length(unique(resdf$a))
length(unique(resdf$b))
View(rabmat)
rabmat = pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab)
View(rabmat)
resdf=res
resdf = resdf[resdf$collection.year.x == yr & collection.year.y == yr]
rabmat = pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab)
length(unique(resdf$a))
length(unique(resdf$b))
View(rabmat)
rabmat = rabmat[,-1] #remove row ids
rabmat = rbind(NA, rabmat)
rabmat = rbind(rabmat, NA)
rabmat = pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab)
length(unique(resdf$a))
length(unique(resdf$b))
rabmat = rabmat[,-1] #remove row ids
rabmat = rbind(NA, rabmat)
rabmat = cbind(NA,rabmat)
View(rabmat)
rabmat = pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab)
length(unique(resdf$a))
View(rabmat)
rabmat = rabmat[,-1] #remove row ids
View(rabmat)
unique(res$a)
colnames(rabmat) = unique(res$a)
rownames(rabmat) = unique(res$b)
rownames(rabmat) = unique(res$b)
rabmat = pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab)
rabmat = data.frame(pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab))
length(unique(resdf$a))
length(unique(resdf$b))
colnames(rabmat) = unique(res$a)
rownames(rabmat) = unique(res$b)
View(rabmat)
rabmat = data.frame(pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab))
View(rabmat)
resdf=res
resdf = resdf[resdf$collection.year.x == yr & collection.year.y == yr]
rabmat = data.frame(pivot_wider(resdf[,c('a', 'b', 'rab')], names_from = a, values_from = rab))
View(rabmat)
rabmat = rabmat[,-1] #remove row ids
View(rabmat)
colnames(rabmat) = unique(res$a)
rownames(rabmat) = unique(res$b)
View(rabmat)
#set colnames to sample ids from
colnames(rabmat) = unique(res$sample_id.x)
rownames(rabmat) = unique(res$sample_id.y)
View(rabmat)
completeMatrix(rabmat)
upper.tri(rabmat)
lower.tri(rabmat)
upper.tri(rabmat)
rabmat
rbind(NA, rabmat)
rabmat = rbind(NA, rabmat)
colnames(rabmat) = metadata$sample_id
metadata$sample_id
View(rabmat)
rownames(rabmat) = metadata$sample_id
View(rabmat)
rabmat = cbind(rabmat, NA)
colnames(rabmat) = metadata$sample_id
View(rabmat)
diag(rabmat)
diag(as.matrix(rabmat))
diag(as.matrix(rabmat)) <- 0
rabmat = as.matrix(rabmat)
diag(rabmat)
diag(rabmat) = 0
diag(rabmat)
View(rabmat)
upper.tri(rabmat)
rabmat[upper.tri(rabmat)]
rabmat[lower.tri(rabmat)]
rabmatp[upper.tri(rabmat)] = rabmat[lower.tri(rabmat)]
rabmat[upper.tri(rabmat)] = rabmat[lower.tri(rabmat)]
rabmat
View(rabmat)
dim(rabmat)
#now make population frame
metadata[c('sample_id')]
#now make population frame
metadata[,c('sample_id')]
#now make population frame
metadata[,c('sample_id', 'collection.year', 'Pop')]
#now make population frame with sample id, year and population
popframe = metadata[,c('sample_id', 'collection.year', 'Pop')]
rownames(popframe)  =popframe$sample_id
popframe
rownames(popframe)  =popframe$sample_id
popframe
View(popframe)
check.datasets(rabmat, popframe)
poppr::check.datasets(rabmat, popframe)
####ILandscape genetic analysis of PMI samples
#load env and metadata
pkg = c("tidyverse", "gridExtra", "RColorBrewer", "BiodiversityR", "poppr" , "data.table", "sf", "geosphere", 'UpSetR', 'raster', 'igraph', 'adegenet', 'vegan')
#install.packages(pkg) #install packages if you need them and load
new.packages <- pkg[!(pkg %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(pkg, require, character.only = TRUE)#
#load metadata and clean
library(BiodiversityR)
rownames(as.matrix(popframe))  =popframe$sample_id
rownames(as.matrix(popframe))  =popframe$sample_id
as.matrix(popframe)
#now make population frame with sample id, year and population
popframe = metadata[,c('collection.year', 'Pop')]
rownames(as.matrix(popframe))  =popframe$sample_id
rownames(popframe)  =metadata$sample_id
popframe
as.matrix(popframe)
popframe = as.matrix(popframe)
rownames(popframe)  =metadata$sample_id
popframe
agc.adonis <- adonis2(rabmat ~ Year + Pop, data=popframe, permutations=9999)
agc.adonis <- adonis2(rabmat ~ Year + Pop, data=data.frame(popframe), permutations=9999)
data.frame(popframe)
#now make population frame with sample id as rowid, year and population
popframe = metadata[,c('collection.year', 'Pop')]
popframe = data.frame((popframe))
rownames(popframe)  =metadata$sample_id
popframe
colnames(popframe) <-
agc.adonis <- adonis2(rabmat ~ collection.year + Pop, data=data.frame(popframe), permutations=9999)
colnames(popframe) <-
agc.adonis <- adonis2(rabmat ~ collection.year + Pop, data=data.frame(popframe), permutations=9999)
#run adonis test
agc.adonis <- adonis2(rabmat ~ collection.year + Pop, data=data.frame(popframe), permutations=9999)
agc.adonis
popframe$pop_year = paste0(popframe$Pop, '_', popframe$collection.year)
#run adonis test
agc.adonis <- adonis2(rabmat ~ collection.year + Pop +pop_year, data=data.frame(popframe), permutations=9999)
agc.adonis
####ILandscape genetic analysis of PMI samples
#load env and metadata
pkg = c("tidyverse", "gridExtra", "RColorBrewer", "BiodiversityR", "poppr" , "data.table", "sf", "geosphere", 'UpSetR', 'raster', 'igraph', 'adegenet', 'vegan')
#install.packages(pkg) #install packages if you need them and load
new.packages <- pkg[!(pkg %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(pkg, require, character.only = TRUE)#
#load metadata and clean
library(BiodiversityR)
install.packages('Rcmdr')
install.packages('BiodiversityR')
BiodiversityR
?BiodiversityR
library(BiodiversityR)
library('Rcmdr')
library(BiodiversityR)
